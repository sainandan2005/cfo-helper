'use client';

import { useState } from 'react';
import { BaselineData, ScenarioData, ForecastResults } from '@/types';
import { formatCurrency } from '@/utils/calculations';
import { generatePDFReport } from '@/utils/pdfGenerator';

interface ReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  baseline: BaselineData;
  scenario: ScenarioData;
  forecast: ForecastResults;
  scenarioCount: number;
}

export function ReportModal({ 
  isOpen, 
  onClose, 
  baseline, 
  scenario, 
  forecast, 
  scenarioCount 
}: ReportModalProps) {
  const [copied, setCopied] = useState(false);
  const [generatingPDF, setGeneratingPDF] = useState(false);

  if (!isOpen) return null;

  const generateReportText = () => {
    const timestamp = new Date().toLocaleString();
    
    return `CFO Helper Financial Report
Generated: ${timestamp}
Scenarios Tested: ${scenarioCount}

BASELINE FINANCIAL DATA
Initial Cash Balance: ${formatCurrency(baseline.cashBalance)}
Monthly Income: ${formatCurrency(baseline.monthlyIncome)}
Monthly Expenses: ${formatCurrency(baseline.monthlyExpenses)}

SCENARIO ADJUSTMENTS
New Hires: ${scenario.newHires}
Cost per Hire: ${formatCurrency(scenario.costPerHire)}
Extra Monthly Spending: ${formatCurrency(scenario.extraSpending)}
Revenue Change: ${scenario.revenueChange}%

FORECAST RESULTS
${forecast.isProfitable 
  ? `✅ PROFITABLE: Monthly net profit of ${formatCurrency(forecast.monthlyNet)}`
  : `⚠️ CASH BURN: ${forecast.runway} months runway, burning ${formatCurrency(Math.abs(forecast.monthlyNet))} per month`
}

This report was generated by CFO Helper - Financial Forecasting Tool`;
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateReportText());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const downloadPDF = async () => {
    setGeneratingPDF(true);
    try {
      await generatePDFReport(baseline, scenario, forecast, scenarioCount);
    } catch (err) {
      console.error('Failed to generate PDF: ', err);
    } finally {
      setGeneratingPDF(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-900">Financial Report</h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 text-2xl"
            >
              ×
            </button>
          </div>

          <div className="space-y-6">
            {/* Report Header */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-600">Generated: {new Date().toLocaleString()}</p>
              <p className="text-sm text-gray-600">Scenarios Tested: {scenarioCount}</p>
            </div>

            {/* Baseline Data */}
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-3">Baseline Financial Data</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-blue-50 p-3 rounded">
                  <p className="text-sm text-gray-600">Initial Cash Balance</p>
                  <p className="font-semibold">{formatCurrency(baseline.cashBalance)}</p>
                </div>
                <div className="bg-green-50 p-3 rounded">
                  <p className="text-sm text-gray-600">Monthly Income</p>
                  <p className="font-semibold">{formatCurrency(baseline.monthlyIncome)}</p>
                </div>
                <div className="bg-red-50 p-3 rounded">
                  <p className="text-sm text-gray-600">Monthly Expenses</p>
                  <p className="font-semibold">{formatCurrency(baseline.monthlyExpenses)}</p>
                </div>
              </div>
            </div>

            {/* Scenario Adjustments */}
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-3">Scenario Adjustments</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-gray-50 p-3 rounded">
                  <p className="text-sm text-gray-600">New Hires</p>
                  <p className="font-semibold">{scenario.newHires} employees</p>
                </div>
                <div className="bg-gray-50 p-3 rounded">
                  <p className="text-sm text-gray-600">Cost per Hire</p>
                  <p className="font-semibold">{formatCurrency(scenario.costPerHire)}</p>
                </div>
                <div className="bg-gray-50 p-3 rounded">
                  <p className="text-sm text-gray-600">Extra Monthly Spending</p>
                  <p className="font-semibold">{formatCurrency(scenario.extraSpending)}</p>
                </div>
                <div className="bg-gray-50 p-3 rounded">
                  <p className="text-sm text-gray-600">Revenue Change</p>
                  <p className="font-semibold">{scenario.revenueChange}%</p>
                </div>
              </div>
            </div>

            {/* Forecast Results */}
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-3">Forecast Results</h3>
              <div className={`p-4 rounded-lg ${forecast.isProfitable ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
                {forecast.isProfitable ? (
                  <div className="text-green-800">
                    <p className="font-semibold text-lg">✅ Company is Profitable</p>
                    <p>Monthly net profit: {formatCurrency(forecast.monthlyNet)}</p>
                  </div>
                ) : (
                  <div className="text-red-800">
                    <p className="font-semibold text-lg">⚠️ Cash Runway Warning</p>
                    <p>Projected runway: {forecast.runway} months</p>
                    <p>Monthly burn rate: {formatCurrency(Math.abs(forecast.monthlyNet))}</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mt-6 pt-4 border-t">
            <button
              onClick={downloadPDF}
              disabled={generatingPDF}
              className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                generatingPDF
                  ? 'bg-gray-400 text-white cursor-not-allowed'
                  : 'bg-red-600 text-white hover:bg-red-700'
              }`}
            >
              <div className="flex items-center justify-center">
                {generatingPDF ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Generating PDF...
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Download PDF
                  </>
                )}
              </div>
            </button>
            <button
              onClick={copyToClipboard}
              className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
                copied 
                  ? 'bg-green-600 text-white' 
                  : 'bg-blue-600 text-white hover:bg-blue-700'
              }`}
            >
              {copied ? '✓ Copied!' : 'Copy to Clipboard'}
            </button>
            <button
              onClick={onClose}
              className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}